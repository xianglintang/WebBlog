<template>
  <div>
    <button @click="editArticle" class="edit-button">Edit</button>z
    <!-- 大纲部分 -->
    <div v-if="outline.length">
      <h3>大纲</h3>
      <ul>
        <li v-for="item in outline" :key="item.id">
          <a :href="'#' + item.id">{{ item.title }}</a>
        </li>
      </ul>
    </div>

    <div 
      v-html="CurrentArticle" 
      class="markdown-body" 
      style="font-size: small" 
      v-highlight
      @load="generateOutline"
    ></div>
  </div>
</template>


<script setup>

import {ref, reactive, watch, onMounted} from 'vue';
import {SearchById} from '@/api/article.js';
import { useRoute,useRouter } from 'vue-router';
import router from "@/router/index.js";
//md导入，由于我们后端已经完成了md转html，所以前端不用转，现在是搞样式和代码高亮
import 'github-markdown-css'

const route = useRoute();//需要参数

const CurrentArticle = ref(null);
const articleId = reactive({articleId:''});
const outline = ref([]); // 存储大纲
//文章id是否变化,，变化重新根据id搜索
watch(() => route.query.articleId, (NewarticleId) => {
  // 检测搜索值是否变化,，变化则执行下去
  console.log("NewarticleId:"+NewarticleId);
  articleId.articleId = NewarticleId;
  //不用再修改，因为''后端也会判断，只能拿来拼接，然后请求
  console.log(articleId);
  console.log(articleId.articleId);
  try{
      //id查找
      SearchById(articleId.articleId).then(res=>{
      CurrentArticle.value=res.data;//传来后端解析md文件转为html数据
      generateOutline(); // 每次加载新内容时生成大纲
      console.log(CurrentArticle.value)
    })
  }
  catch(error){
    console.log(error)
  }

},{ immediate: true });

// 生成大纲
const generateOutline = () => {
  // 使用正则匹配 h1, h2, h3 等标题
  const tempDiv = document.createElement('div');
  tempDiv.innerHTML = CurrentArticle.value;
  outline.value = Array.from(tempDiv.querySelectorAll('h1, h2, h3')).map((heading, index) => ({
    id: `heading-${index}`, // 生成唯一 ID
    title: heading.innerText,
  }));

  // 为每个标题添加 ID
  outline.value.forEach((item, index) => {
    tempDiv.querySelectorAll('h1, h2, h3')[index].id = item.id;
  });
  CurrentArticle.value = tempDiv.innerHTML; // 更新带有 ID 的 HTML 内容
};
// 编辑文章函数
const editArticle = () => {
  // 跳转到编辑页面，传递文章 ID
  router.push({ name: 'articleEditor', query: { articleId: articleId.articleId } });
};
</script>

<style scoped>
.markdown-body {
  box-sizing: border-box;
  min-width: 200px;
  max-width: 980px;
  margin: 0 auto;
  padding: 45px;
}

@media (max-width: 767px) {
  .markdown-body {
    padding: 15px;
  }
}
</style>